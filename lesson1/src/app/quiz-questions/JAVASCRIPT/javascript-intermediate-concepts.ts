export const JAVASCRIPT_INTERMEDIATE_CONCEPTS_QUESTIONS = [
  { id: 1, question: 'What does the "this" keyword refer to in the global scope?', options: ['The global object', 'The current function', 'The object calling the function', 'None of the above'], answer: 'The global object' },
  { id: 2, question: 'True or False: The "this" keyword in a regular function refers to the object that owns the function.', options: [], answer: 'True' },
  { id: 3, question: 'What will the "this" keyword refer to when used inside an arrow function?', options: ['The object that owns the function', 'The global object', 'The enclosing execution context', 'None of the above'], answer: 'The enclosing execution context' },
  { id: 4, question: 'In the context of an object method, what does the "this" keyword refer to?', options: ['The method itself', 'The object that owns the method', 'The global object', 'The function that called the method'], answer: 'The object that owns the method' },
  { id: 5, question: 'How can you explicitly set the "this" keyword in a function?', options: ['Using the bind() method', 'Using the call() method', 'Using the apply() method', 'All of the above'], answer: 'All of the above' },
  { id: 6, question: 'What is the purpose of the constructor method in a JavaScript class?', options: ['To create a new instance of the class', 'To define methods for the class', 'To initialize the properties of the class', 'To bind methods to the class'], answer: 'To initialize the properties of the class' },
  { id: 7, question: 'True or False: Static methods in a class can be called on instances of the class.', options: [], answer: 'False' },
  { id: 8, question: 'What does the get keyword do in a JavaScript class?', options: ['Defines a method that sets a property', 'Defines a method that gets a property', 'Defines a static method', 'Defines a private field'], answer: 'Defines a method that gets a property' },
  { id: 9, question: 'What is the purpose of private fields in a JavaScript class?', options: ['To protect class data from being accessed outside the class', 'To provide utility methods', 'To define constants', 'To store instance methods'], answer: 'To protect class data from being accessed outside the class' },
  { id: 10, question: 'How do you define a static method in a JavaScript class?', options: ['Using the static keyword', 'Using the private keyword', 'Using the constructor keyword', 'Using the public keyword'], answer: 'Using the static keyword' },
  { id: 11, question: 'What will be the output of `new Company("Tech")` if the `Company` class is defined with a constructor that sets `this.name`?', options: ['An object with name "Tech"', 'An object with name "Company"', 'An error', 'Undefined'], answer: 'An object with name "Tech"' },
  { id: 12, question: 'In a class method, what does the "this" keyword refer to?', options: ['The class itself', 'The instance of the class', 'The parent class', 'The global object'], answer: 'The instance of the class' },
  { id: 13, question: 'What is the primary role of a constructor method in JavaScript classes?', options: ['To define methods for the class', 'To initialize object properties', 'To bind methods', 'To handle errors'], answer: 'To initialize object properties' },
  { id: 14, question: 'True or False: A class can have multiple constructor methods.', options: [], answer: 'False' },
  { id: 15, question: 'What does the `get` accessor in a class do?', options: ['Allows setting a property value', 'Allows getting a property value', 'Defines a static method', 'Defines a private field'], answer: 'Allows getting a property value' },
  { id: 16, question: 'What will the following code output? `console.log(Calculator.add(5, 3));` where `Calculator` has a static method `add`?', options: ['5', '8', '15', 'Error'], answer: '8' },
  { id: 17, question: 'How do you define a private field in a JavaScript class?', options: ['Using a hash (#) prefix', 'Using the private keyword', 'Using the static keyword', 'Using the let keyword'], answer: 'Using a hash (#) prefix' },
  { id: 18, question: 'What is the purpose of getters and setters in a class?', options: ['To access and modify private fields', 'To define static methods', 'To initialize the object', 'To bind methods'], answer: 'To access and modify private fields' },
  { id: 19, question: 'How does the "this" keyword behave inside a class method?', options: ['It refers to the instance of the class', 'It refers to the class itself', 'It refers to the global object', 'It is undefined'], answer: 'It refers to the instance of the class' },
  { id: 20, question: 'What will be the output of `console.log(circle.getArea());` if `Circle` class has a private field `#radius` and a method `getArea()`?', options: ['The area of the circle', 'The radius of the circle', 'An error', 'Undefined'], answer: 'The area of the circle' },
  { id: 21, question: 'True or False: You can access private fields outside of the class where they are defined.', options: [], answer: 'False' },
  { id: 22, question: 'What does the `set` accessor in a class do?', options: ['Allows getting a property value', 'Allows setting a property value', 'Defines a static method', 'Defines a private field'], answer: 'Allows setting a property value' },
  { id: 23, question: 'How do static methods differ from instance methods in a class?', options: ['Static methods are called on the class itself, not on instances', 'Instance methods are called on the class itself', 'Static methods are defined in the constructor', 'Instance methods cannot be used by the class'], answer: 'Static methods are called on the class itself, not on instances' },
  { id: 24, question: 'What will the output be if you call a static method directly on an instance of a class?', options: ['It will work normally', 'It will return undefined', 'It will throw an error', 'It will execute the method on the instance'], answer: 'It will throw an error' },
  { id: 25, question: 'What is the role of the `this` keyword inside the constructor method of a class?', options: ['It initializes the properties of the class', 'It creates a new instance of the class', 'It defines static methods', 'It binds methods to the class'], answer: 'It initializes the properties of the class' }
];
