export const BUILDING_REAL_THINGS_QUESTIONS = [
  { id: 1, question: 'What lifecycle hook in Angular is ideal for initializing data that depends on the input properties of a component?', options: ['ngOnInit', 'ngAfterViewInit', 'ngAfterContentInit', 'ngOnChanges'], answer: 'ngOnInit' },
  { id: 2, question: 'In Angular, which decorator is used to define a directive?', options: ['@Component', '@Directive', '@Pipe', '@Injectable'], answer: '@Directive' },
  { id: 3, question: 'What is the role of the `ChangeDetectorRef` service in Angular?', options: ['To manually trigger change detection', 'To handle HTTP requests', 'To define routes', 'To manage component styling'], answer: 'To manually trigger change detection' },
  { id: 4, question: 'What method is used to manually detect changes in an Angular component when using the `ChangeDetectionStrategy.OnPush` strategy?', options: ['markForCheck()', 'detectChanges()', 'checkForChanges()', 'triggerChangeDetection()'], answer: 'detectChanges()' },
  { id: 5, question: 'In Angular, which operator is used to handle asynchronous operations in the context of RxJS?', options: ['mergeMap', 'switchMap', 'concatMap', 'all of the above'], answer: 'all of the above' },
  { id: 6, question: 'What is the purpose of `NgModule` in Angular beyond defining a module?', options: ['To configure application-wide providers and import other modules', 'To create a new component', 'To manage user authentication', 'To handle form validation'], answer: 'To configure application-wide providers and import other modules' },
  { id: 7, question: 'Which decorator is used to define metadata for an Angular pipe?', options: ['@Pipe', '@Component', '@Directive', '@Injectable'], answer: '@Pipe' },
  { id: 8, question: 'True or False: Angular’s dependency injection system supports hierarchical injectors.', options: [], answer: 'True' },
  { id: 9, question: 'In Angular, how can you achieve lazy loading of a feature module?', options: ['Using RouterModule with `loadChildren` syntax', 'Using `NgModule` with `import` statements', 'Using `HttpClient` to fetch module data', 'None of the above'], answer: 'Using RouterModule with `loadChildren` syntax' },
  { id: 10, question: 'What is the function of `ngOnChanges` lifecycle hook?', options: ['To respond to changes in input properties', 'To initialize data once the component is created', 'To clean up resources when the component is destroyed', 'To perform actions after the view has been initialized'], answer: 'To respond to changes in input properties' },
  { id: 11, question: 'In Angular, how can you ensure that a service instance is singleton within a module?', options: ['Provide the service in the module\'s providers array', 'Provide the service in the component\'s providers array', 'Use `@Injectable({ providedIn: "root" })`', 'None of the above'], answer: 'Use `@Injectable({ providedIn: "root" })`' },
  { id: 12, question: 'Which Angular CLI command generates a new service?', options: ['ng generate service', 'ng create service', 'ng add service', 'ng build service'], answer: 'ng generate service' },
  { id: 13, question: 'How can you pass data from a child component to a parent component in Angular?', options: ['Using `@Output` and `EventEmitter`', 'Using `@Input` decorators', 'Through service methods', 'Direct property binding'], answer: 'Using `@Output` and `EventEmitter`' },
  { id: 14, question: 'What is the purpose of the `providers` array in an Angular module?', options: ['To define services available for dependency injection', 'To specify the components of the module', 'To configure the module’s routing', 'To declare pipes used within the module'], answer: 'To define services available for dependency injection' },
  { id: 15, question: 'Which Angular decorator allows you to configure metadata for routing?', options: ['@Component', '@Directive', '@NgModule', '@Route'], answer: '@NgModule' },
  { id: 16, question: 'What is the primary function of the `HttpInterceptor` service in Angular?', options: ['To modify HTTP requests and responses', 'To manage component state', 'To create a new component', 'To handle routing'], answer: 'To modify HTTP requests and responses' },
  { id: 17, question: 'In Angular, what is the significance of the `trackBy` function in `ngFor` directive?', options: ['To optimize the rendering of list items by tracking changes', 'To apply custom styles to list items', 'To handle user input', 'To perform data binding'], answer: 'To optimize the rendering of list items by tracking changes' },
  { id: 18, question: 'How can you implement routing guards to protect routes in an Angular application?', options: ['By creating services implementing `CanActivate` or `CanDeactivate` interfaces', 'By using the `@Guard` decorator', 'By defining routes with `authGuard` property', 'By including authentication logic in the component'], answer: 'By creating services implementing `CanActivate` or `CanDeactivate` interfaces' },
  { id: 19, question: 'Which Angular directive would you use to conditionally render elements based on a boolean expression?', options: ['*ngIf', '*ngFor', '*ngSwitch', '*ngStyle'], answer: '*ngIf' },
  { id: 20, question: 'What is the purpose of `NgZone` service in Angular?', options: ['To run code outside Angular’s change detection', 'To handle HTTP requests', 'To manage user authentication', 'To define module metadata'], answer: 'To run code outside Angular’s change detection' },
  { id: 21, question: 'Which lifecycle hook would you use to clean up subscriptions or perform final cleanup tasks in Angular?', options: ['ngOnDestroy', 'ngOnInit', 'ngAfterViewInit', 'ngAfterContentChecked'], answer: 'ngOnDestroy' },
  { id: 22, question: 'True or False: Angular supports component inheritance, allowing a component to extend another component.', options: [], answer: 'True' },
  { id: 23, question: 'What does the `ngContent` directive do in Angular?', options: ['It projects content into a component', 'It styles a component', 'It defines a route', 'It manages component state'], answer: 'It projects content into a component' },
  { id: 24, question: 'In Angular, which module is used to manage form validations for reactive forms?', options: ['ReactiveFormsModule', 'FormsModule', 'HttpClientModule', 'CommonModule'], answer: 'ReactiveFormsModule' },
  { id: 25, question: 'How can you configure a component to communicate with its parent component using Angular’s dependency injection?', options: ['By injecting the parent component as a dependency', 'By using `@Output` and `EventEmitter`', 'By defining a shared service', 'By using input bindings'], answer: 'By defining a shared service' }
];
