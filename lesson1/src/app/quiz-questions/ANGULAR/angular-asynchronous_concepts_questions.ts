export const ANGULAR_ASYNCHRONOUS_CONCEPTS_QUESTIONS = [
  { id: 1, question: 'What is asynchronous code in JavaScript?', options: ['Code that executes immediately', 'Code that needs to wait for something else to complete', 'Code that runs in parallel threads', 'Code that always runs synchronously'], answer: 'Code that needs to wait for something else to complete' },
  { id: 2, question: 'How does JavaScript handle asynchronous operations?', options: ['By using multiple threads', 'By blocking the main thread', 'By using callbacks and promises', 'By executing code in a sequential manner'], answer: 'By using callbacks and promises' },
  { id: 3, question: 'What is an Observable in Angular?', options: ['A stream of data that can be subscribed to', 'A method for handling synchronous code', 'A type of service for data storage', 'A component lifecycle hook'], answer: 'A stream of data that can be subscribed to' },
  { id: 4, question: 'How can an Observer interact with an Observable?', options: ['By emitting data to the Observable', 'By subscribing to the Observable', 'By unsubscribing from the Observable', 'By creating new Observables'], answer: 'By subscribing to the Observable' },
  { id: 5, question: 'What is a Subject in Angular?', options: ['A type of Observable that can emit and subscribe to data', 'A directive for handling user inputs', 'A service for HTTP requests', 'A component for displaying data'], answer: 'A type of Observable that can emit and subscribe to data' },
  { id: 6, question: 'How do you replace `EventEmitter` with `Subject`?', options: ['Import `Subject`, create a new `Subject`, and use `next()` instead of `emit`', 'Use `Subject` as a directive in the template', 'Replace all `EventEmitter` with `BehaviorSubject`', 'Remove `EventEmitter` without replacement'], answer: 'Import `Subject`, create a new `Subject`, and use `next()` instead of `emit`' },
  { id: 7, question: 'What is the role of `next()` method in a Subject?', options: ['To emit new values to subscribers', 'To subscribe to an Observable', 'To handle errors in an Observable', 'To unsubscribe from an Observable'], answer: 'To emit new values to subscribers' },
  { id: 8, question: 'When should you use the `ngOnDestroy()` lifecycle hook in an Angular component?', options: ['To clean up subscriptions and avoid memory leaks', 'To initialize component data', 'To handle route navigation', 'To configure HTTP requests'], answer: 'To clean up subscriptions and avoid memory leaks' },
  { id: 9, question: 'How do you add a new component in Angular?', options: ['Using `ng generate component <component-name>` command', 'By manually creating files and configuring routes', 'By copying an existing component', 'By modifying `app.module.ts` directly'], answer: 'Using `ng generate component <component-name>` command' },
  { id: 10, question: 'What does the `Subscription` type in Angular do?', options: ['Stores subscription to an Observable for cleanup', 'Handles asynchronous operations', 'Creates new Observables', 'Defines routes in an Angular application'], answer: 'Stores subscription to an Observable for cleanup' },
  { id: 11, question: 'How do you unsubscribe from an Observable in Angular?', options: ['By calling `unsubscribe()` on the Subscription object', 'By using `ngOnInit()`', 'By removing the component from the DOM', 'By updating the Observable configuration'], answer: 'By calling `unsubscribe()` on the Subscription object' },
  { id: 12, question: 'What is the purpose of the `pipe` method in RxJS?', options: ['To chain multiple RxJS operators', 'To transform data before emitting', 'To create new Observables', 'To handle HTTP requests'], answer: 'To chain multiple RxJS operators' },
  { id: 13, question: 'What does the `map` operator do in RxJS?', options: ['Transforms data emitted by an Observable', 'Filters out values from an Observable', 'Combines multiple Observables', 'Handles errors in an Observable'], answer: 'Transforms data emitted by an Observable' },
  { id: 14, question: 'What is the difference between `Observable` and `Subject`?', options: ['`Observable` is for emitting data, `Subject` can emit and subscribe', '`Subject` is used for HTTP requests, `Observable` is used for event handling', '`Observable` is synchronous, `Subject` is asynchronous', 'There is no difference'], answer: '`Observable` is for emitting data, `Subject` can emit and subscribe' },
  { id: 15, question: 'What is the use of `BehaviorSubject` in Angular?', options: ['To maintain the current value and emit it to new subscribers', 'To emit values asynchronously', 'To filter values from an Observable', 'To handle route parameters'], answer: 'To maintain the current value and emit it to new subscribers' },
  { id: 16, question: 'How do you create an Observable in Angular?', options: ['By using the `Observable` constructor from RxJS', 'By creating a new Angular service', 'By defining a component with async data', 'By configuring a route'], answer: 'By using the `Observable` constructor from RxJS' },
  { id: 17, question: 'What does the `filter` operator do in RxJS?', options: ['Filters out values from an Observable based on a condition', 'Transforms data emitted by an Observable', 'Combines multiple Observables', 'Handles errors in an Observable'], answer: 'Filters out values from an Observable based on a condition' },
  { id: 18, question: 'What does the `subscribe` method do in Angular?', options: ['Starts the Observable stream and handles emitted values', 'Defines a new Observable', 'Creates a new Angular component', 'Configures route parameters'], answer: 'Starts the Observable stream and handles emitted values' },
  { id: 19, question: 'What is the purpose of the `ngOnInit()` lifecycle hook?', options: ['To initialize component data and subscriptions', 'To handle component destruction', 'To configure routing', 'To clean up HTTP requests'], answer: 'To initialize component data and subscriptions' },
  { id: 20, question: 'How do you define nested routes in Angular?', options: ['By using the `children` property in route configuration', 'By adding parameters to the route path', 'By using `ngOnInit()`', 'By creating a new component'], answer: 'By using the `children` property in route configuration' },
  { id: 21, question: 'What is the role of `RouterModule.forRoot()` in Angular?', options: ['Configures the router with root routes', 'Defines child routes', 'Handles HTTP requests', 'Manages route guards'], answer: 'Configures the router with root routes' },
  { id: 22, question: 'How do you pass dynamic route parameters in Angular?', options: ['By using `:` in the route path', 'By using query parameters', 'By using URL fragments', 'By using route guards'], answer: 'By using `:` in the route path' },
  { id: 23, question: 'What does the `routerLinkActive` directive do?', options: ['Adds an active class to the current route link', 'Defines child routes', 'Configures route parameters', 'Handles route redirection'], answer: 'Adds an active class to the current route link' },
  { id: 24, question: 'How can you programmatically navigate to a route in Angular?', options: ['Using `Router.navigate()` method', 'Using `ActivatedRoute` service', 'Using `RouteConfig`', 'Using `RouterOutlet`'], answer: 'Using `Router.navigate()` method' },
  { id: 25, question: 'What is the purpose of the `redirectTo` property in Angular routing?', options: ['To redirect from one route to another', 'To define a route with dynamic parameters', 'To configure child routes', 'To handle HTTP requests'], answer: 'To redirect from one route to another' }
];
