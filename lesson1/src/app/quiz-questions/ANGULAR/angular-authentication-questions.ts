export const ANGULAR_AUTHENTICATION_QUESTIONS = [
  { id: 1, question: 'What is the purpose of Angular’s `AuthService`?', options: ['To manage user authentication and authorization', 'To handle HTTP requests', 'To manage component state', 'To define routes'], answer: 'To manage user authentication and authorization' },
  { id: 2, question: 'True or False: In Angular, the `CanActivate` guard is used to prevent unauthorized users from accessing certain routes.', options: [], answer: 'True' },
  { id: 3, question: 'Which Angular module is commonly used to handle authentication tokens and secure HTTP requests?', options: ['HttpClientModule', 'FormsModule', 'ReactiveFormsModule', 'RouterModule'], answer: 'HttpClientModule' },
  { id: 4, question: 'How can you store authentication tokens securely in an Angular application?', options: ['In session storage', 'In local storage', 'In a cookie with HttpOnly flag', 'In plain text files'], answer: 'In a cookie with HttpOnly flag' },
  { id: 5, question: 'What Angular service is typically used to manage user sessions and provide authentication functionalities?', options: ['AuthService', 'UserService', 'HttpClient', 'RouterService'], answer: 'AuthService' },
  { id: 6, question: 'Which Angular guard is used to redirect users to the login page if they are not authenticated?', options: ['CanActivate', 'CanDeactivate', 'Resolve', 'CanLoad'], answer: 'CanActivate' },
  { id: 7, question: 'True or False: In Angular, you can use the `HttpInterceptor` to attach authentication tokens to outgoing HTTP requests.', options: [], answer: 'True' },
  { id: 8, question: 'What is the primary role of the `Router` in Angular authentication?', options: ['To manage user routing based on authentication state', 'To handle form submissions', 'To create custom components', 'To define services'], answer: 'To manage user routing based on authentication state' },
  { id: 9, question: 'How can you implement role-based access control in an Angular application?', options: ['Using route guards and checking user roles', 'Using Angular pipes', 'Using component inheritance', 'Using Angular directives'], answer: 'Using route guards and checking user roles' },
  { id: 10, question: 'Which method of `HttpInterceptor` is used to intercept outgoing requests and modify them?', options: ['intercept', 'handle', 'modify', 'process'], answer: 'intercept' },
  { id: 11, question: 'True or False: Angular’s `CanLoad` guard can be used to prevent loading of modules if the user is not authenticated.', options: [], answer: 'True' },
  { id: 12, question: 'What is the purpose of the `AuthGuard` in Angular?', options: ['To protect routes from unauthorized access', 'To manage form validation', 'To handle component lifecycle', 'To implement data binding'], answer: 'To protect routes from unauthorized access' },
  { id: 13, question: 'Which Angular lifecycle hook can be used to fetch user authentication status when a component is initialized?', options: ['ngOnInit', 'ngAfterViewInit', 'ngOnChanges', 'ngDoCheck'], answer: 'ngOnInit' },
  { id: 14, question: 'True or False: It is recommended to store sensitive information such as authentication tokens in local storage.', options: [], answer: 'False' },
  { id: 15, question: 'Which Angular directive is used to conditionally display elements based on user authentication status?', options: ['*ngIf', '*ngFor', '*ngSwitch', '*ngModel'], answer: '*ngIf' },
  { id: 16, question: 'How can you handle user logout in an Angular application?', options: ['By clearing authentication tokens and redirecting to the login page', 'By removing components from the view', 'By resetting form fields', 'By reloading the page'], answer: 'By clearing authentication tokens and redirecting to the login page' },
  { id: 17, question: 'True or False: Angular’s `HttpInterceptor` can be used to handle errors related to authentication, such as expired tokens.', options: [], answer: 'True' },
  { id: 18, question: 'Which Angular feature is used to route users to specific pages based on their authentication state?', options: ['RouterModule', 'FormsModule', 'ReactiveFormsModule', 'HttpClientModule'], answer: 'RouterModule' },
  { id: 19, question: 'What Angular service should be used to manage user authentication and make requests to authentication APIs?', options: ['AuthService', 'HttpClient', 'Router', 'FormsService'], answer: 'AuthService' },
  { id: 20, question: 'How can you protect sensitive routes in Angular?', options: ['By using route guards such as `CanActivate`', 'By using Angular directives', 'By using service methods', 'By using component styles'], answer: 'By using route guards such as `CanActivate`' },
  { id: 21, question: 'True or False: Angular’s `HttpInterceptor` allows you to handle request and response data before it reaches the component.', options: [], answer: 'True' },
  { id: 22, question: 'Which Angular feature allows you to manage user roles and permissions for accessing specific parts of the application?', options: ['Route guards', 'Angular pipes', 'Custom components', 'HTTP services'], answer: 'Route guards' },
  { id: 23, question: 'How do you handle authentication token expiration in Angular?', options: ['By using `HttpInterceptor` to detect and handle token expiration', 'By clearing the browser cache', 'By using Angular pipes', 'By refreshing the page'], answer: 'By using `HttpInterceptor` to detect and handle token expiration' },
  { id: 24, question: 'True or False: `CanDeactivate` guard is used to prevent users from navigating away from a route with unsaved changes.', options: [], answer: 'True' },
  { id: 25, question: 'What is the recommended way to ensure a secure authentication flow in an Angular application?', options: ['By using HTTPS, secure cookies, and proper token management', 'By using plain HTTP and storing tokens in local storage', 'By avoiding token-based authentication', 'By not implementing any authentication mechanism'], answer: 'By using HTTPS, secure cookies, and proper token management' }
];
