export const TYPESCRIPT_INTRODUCTION_QUESTIONS = [
  { id: 1, question: 'What command is used to initialize a new npm project?', options: ['npm start', 'npm init -y', 'npm install', 'npm build'], answer: 'npm init -y' },
  { id: 2, question: 'What is the purpose of the `npx tsc` command?', options: ['To compile a Typescript file into JavaScript', 'To install a package globally', 'To update Typescript', 'To initialize a new project'], answer: 'To compile a Typescript file into JavaScript' },
  { id: 3, question: 'Which file extension is used for Typescript files?', options: ['.js', '.ts', '.jsx', '.tsx'], answer: '.ts' },
  { id: 4, question: 'In Typescript, how do you denote a variable that can hold either a number or a string?', options: ['let value: number | string;', 'let value: string[];', 'let value: (number | string);', 'let value: number && string;'], answer: 'let value: number | string;' },
  { id: 5, question: 'What is the result of assigning a string to a variable typed as `number` in Typescript?', options: ['Error', 'Undefined', 'The variable becomes a string', 'The variable becomes NaN'], answer: 'Error' },
  { id: 6, question: 'How do you define a Typescript type alias?', options: ['type AliasName = Type;', 'interface AliasName = Type;', 'class AliasName = Type;', 'function AliasName(Type): Type;'], answer: 'type AliasName = Type;' },
  { id: 7, question: 'What keyword is used to define a Typescript interface?', options: ['type', 'interface', 'class', 'struct'], answer: 'interface' },
  { id: 8, question: 'How do you specify that a function in Typescript returns nothing?', options: ['void', 'undefined', 'null', 'any'], answer: 'void' },
  { id: 9, question: 'What is the difference between `let` and `const` in Typescript?', options: ['`let` allows reassignment while `const` does not', '`let` is for types while `const` is for interfaces', '`const` is used for object types only', '`let` is more performant than `const`'], answer: '`let` allows reassignment while `const` does not' },
  { id: 10, question: 'In Typescript, how do you define an array of numbers?', options: ['let numbers: number[];', 'let numbers: Array<number>;', 'let numbers: (number)[];', 'let numbers: number;[]'], answer: 'let numbers: number[];' },
  { id: 11, question: 'What is Type Inference in Typescript?', options: ['The compiler automatically infers the type of a variable', 'The process of defining a new type', 'The manual specification of a variable type', 'The conversion of types at runtime'], answer: 'The compiler automatically infers the type of a variable' },
  { id: 12, question: 'How do you denote a property in a Typescript interface?', options: ['propertyName: type;', 'type propertyName;', 'let propertyName: type;', 'const propertyName: type;'], answer: 'propertyName: type;' },
  { id: 13, question: 'Which Typescript feature allows for creating reusable components with type-safe parameters?', options: ['Generics', 'Interfaces', 'Type Aliases', 'Classes'], answer: 'Generics' },
  { id: 14, question: 'How can you restrict a Typescript function to accept only specific types?', options: ['By using Union types', 'By using Generics', 'By using Type Aliases', 'By using Interfaces'], answer: 'By using Union types' },
  { id: 15, question: 'What is the purpose of `interface` in Typescript?', options: ['To define a structure for objects', 'To create reusable code', 'To manage types across modules', 'To handle asynchronous operations'], answer: 'To define a structure for objects' },
  { id: 16, question: 'What does the `public` keyword do in a Typescript class?', options: ['It makes the property or method accessible from outside the class', 'It restricts access to the property or method', 'It denotes an abstract method', 'It initializes the property or method'], answer: 'It makes the property or method accessible from outside the class' },
  { id: 17, question: 'How do you create a Typescript class that implements an interface?', options: ['Use the `implements` keyword', 'Use the `extends` keyword', 'Define the interface within the class', 'Use `class` and `type` keywords together'], answer: 'Use the `implements` keyword' },
  { id: 18, question: 'Which Typescript feature provides a way to define a function that can accept multiple types?', options: ['Generics', 'Type Aliases', 'Type Inference', 'Union Types'], answer: 'Generics' },
  { id: 19, question: 'What will happen if you assign an object with missing properties to a Typescript interface?', options: ['Compilation error', 'The object will be assigned with default values', 'The object will be assigned as `any`', 'The code will run but with missing properties'], answer: 'Compilation error' },
  { id: 20, question: 'What does the `readonly` keyword do in a Typescript class?', options: ['Prevents modification of a property', 'Allows modification of a property', 'Makes the property private', 'Ensures the property is initialized'], answer: 'Prevents modification of a property' },
  { id: 21, question: 'How do you define a function with default parameters in Typescript?', options: ['function myFunction(param1: type = defaultValue) {}', 'function myFunction(param1: type?) {}', 'function myFunction(param1: type) { param1 = defaultValue; }', 'function myFunction(param1: type): defaultValue {}'], answer: 'function myFunction(param1: type = defaultValue) {}' },
  { id: 22, question: 'What is the correct way to create a new Typescript project?', options: ['Run `npm init -y` and then install Typescript', 'Run `npm install typescript` and then initialize', 'Create a new `.ts` file and run it', 'Use the `npx tsc` command directly'], answer: 'Run `npm init -y` and then install Typescript' },
  { id: 23, question: 'Which Typescript feature helps in creating a reusable template that can work with various types?', options: ['Generics', 'Type Aliases', 'Interfaces', 'Union Types'], answer: 'Generics' },
  { id: 24, question: 'How do you define a class method that can only be called within the class in Typescript?', options: ['Use the `private` keyword', 'Use the `protected` keyword', 'Use the `public` keyword', 'No specific keyword needed'], answer: 'Use the `private` keyword' },
  { id: 25, question: 'What is the result of using `npx tsc` command on a Typescript file without a Typescript configuration file?', options: ['The file will be compiled with default settings', 'The file will not compile', 'The command will throw an error', 'The command will prompt to create a configuration file'], answer: 'The file will be compiled with default settings' }
];
