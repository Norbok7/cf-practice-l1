export const ANGULAR_HTTP_QUESTIONS = [
  { id: 1, question: 'What is the purpose of `ngZone` in Angular?', options: ['To manage change detection', 'To handle HTTP requests', 'To define modules', 'To manage Angular lifecycle hooks'], answer: 'To manage change detection' },
  { id: 2, question: 'How does Angular handle asynchronous operations within its zone?', options: ['By using Promises and Observables', 'By using callbacks only', 'By blocking the UI thread until completion', 'By using Web Workers'], answer: 'By using Promises and Observables' },
  { id: 3, question: 'What is `NgModule` metadata used for in Angular?', options: ['To define Angular modules', 'To configure HTTP services', 'To handle user input', 'To set up routing'], answer: 'To define Angular modules' },
  { id: 4, question: 'What is the function of `@Optional` decorator in Angular?', options: ['To indicate that a dependency is optional', 'To enforce strict type-checking', 'To define an optional route', 'To enable lazy loading'], answer: 'To indicate that a dependency is optional' },
  { id: 5, question: 'In Angular, what is the use of `@Self` decorator?', options: ['To specify that a dependency should be resolved from the local injector', 'To indicate that a service is self-contained', 'To declare a component', 'To create a new module'], answer: 'To specify that a dependency should be resolved from the local injector' },
  { id: 6, question: 'What is `ChangeDetectionStrategy.OnPush` used for in Angular?', options: ['To optimize performance by reducing the number of change detection checks', 'To force change detection on every user interaction', 'To enable two-way data binding', 'To handle HTTP responses'], answer: 'To optimize performance by reducing the number of change detection checks' },
  { id: 7, question: 'How do you define a custom pipe in Angular?', options: ['By implementing the PipeTransform interface and decorating the class with @Pipe', 'By extending the AngularPipe class', 'By using Angular CLI commands', 'By defining it in a module'], answer: 'By implementing the PipeTransform interface and decorating the class with @Pipe' },
  { id: 8, question: 'What is the purpose of `@HostBinding` decorator in Angular?', options: ['To bind a property of a directive or component to a host element', 'To specify the host component', 'To bind data to a child component', 'To declare a host view'], answer: 'To bind a property of a directive or component to a host element' },
  { id: 9, question: 'In Angular, how do you manage state in a large application?', options: ['By using services and state management libraries like NgRx', 'By using Angular built-in methods only', 'By relying on local component state', 'By using global variables'], answer: 'By using services and state management libraries like NgRx' },
  { id: 10, question: 'What is the role of `@NgModule` imports and exports?', options: ['To include and share components, directives, and pipes across different modules', 'To define global CSS styles', 'To handle user authentication', 'To manage module dependencies'], answer: 'To include and share components, directives, and pipes across different modules' },
  { id: 11, question: 'How can you prevent a component from being destroyed in Angular?', options: ['By using `@HostBinding` decorator', 'By managing its lifecycle hooks carefully', 'By using Angular routing configurations', 'By using `ChangeDetectionStrategy.OnPush`'], answer: 'By managing its lifecycle hooks carefully' },
  { id: 12, question: 'What does `ng build --prod` do in Angular?', options: ['It creates an optimized production build of the Angular application', 'It starts a development server', 'It cleans the build directory', 'It updates Angular CLI'], answer: 'It creates an optimized production build of the Angular application' },
  { id: 13, question: 'What is the purpose of `@Inject` decorator in Angular?', options: ['To specify a dependency injection token', 'To inject a service into a component', 'To define an Angular service', 'To configure routes'], answer: 'To specify a dependency injection token' },
  { id: 14, question: 'How can you create a custom Angular validator?', options: ['By implementing a function or class and using it in the form controls', 'By extending the AngularValidator class', 'By using Angular CLI commands', 'By configuring it in the module'], answer: 'By implementing a function or class and using it in the form controls' },
  { id: 15, question: 'What is the function of `HttpInterceptor` in Angular?', options: ['To intercept and modify HTTP requests and responses', 'To manage user sessions', 'To handle error logging', 'To provide authentication'], answer: 'To intercept and modify HTTP requests and responses' },
  { id: 16, question: 'What is the purpose of `@ViewChild` decorator in Angular?', options: ['To get a reference to a child component or DOM element', 'To bind data to a child component', 'To declare child routes', 'To create a new view'], answer: 'To get a reference to a child component or DOM element' },
  { id: 17, question: 'How can you implement lazy loading in Angular?', options: ['By configuring routes with `loadChildren` property', 'By using Angular CLI commands', 'By importing modules directly', 'By defining lazy-loaded components'], answer: 'By configuring routes with `loadChildren` property' },
  { id: 18, question: 'What is the role of `APP_INITIALIZER` in Angular?', options: ['To provide initialization logic before the Angular application starts', 'To define application routes', 'To configure component styles', 'To handle user authentication'], answer: 'To provide initialization logic before the Angular application starts' },
  { id: 19, question: 'How do you optimize Angular application performance?', options: ['By using lazy loading, change detection strategies, and trackBy function', 'By increasing the bundle size', 'By disabling production builds', 'By using fewer components'], answer: 'By using lazy loading, change detection strategies, and trackBy function' },
  { id: 20, question: 'What is the purpose of `ng-content` in Angular?', options: ['To project content into a component’s view', 'To define component styles', 'To bind data to an element', 'To handle form submissions'], answer: 'To project content into a component’s view' },
  { id: 21, question: 'What does the `async` pipe do in Angular?', options: ['It subscribes to an Observable or Promise and updates the view with the emitted values', 'It creates an Observable from an array', 'It handles HTTP requests asynchronously', 'It manages component states'], answer: 'It subscribes to an Observable or Promise and updates the view with the emitted values' },
  { id: 22, question: 'What is `Renderer2` used for in Angular?', options: ['To safely manipulate DOM elements', 'To handle HTTP requests', 'To manage component state', 'To define component templates'], answer: 'To safely manipulate DOM elements' },
  { id: 23, question: 'How does Angular’s `ChangeDetectionStrategy` affect performance?', options: ['It determines when Angular checks for changes in the application', 'It defines the lifecycle hooks of a component', 'It manages routing configurations', 'It sets up HTTP interceptors'], answer: 'It determines when Angular checks for changes in the application' },
  { id: 24, question: 'What is the role of `@Injectable` decorator in Angular?', options: ['To define a service that can be injected into components', 'To create a new module', 'To handle user authentication', 'To define component templates'], answer: 'To define a service that can be injected into components' },
  { id: 25, question: 'What does `ng serve` command do in Angular?', options: ['It compiles the application and starts a development server', 'It creates a production build', 'It installs dependencies', 'It cleans the build directory'], answer: 'It compiles the application and starts a development server' }
];
