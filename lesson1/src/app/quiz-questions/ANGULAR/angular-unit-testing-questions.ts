export const ANGULAR_UNIT_TESTING_QUESTIONS = [
  { id: 1, question: 'What is the primary purpose of unit testing in Angular?', options: ['To test individual pieces of code', 'To test the overall application', 'To test user interface components', 'To test database interactions'], answer: 'To test individual pieces of code' },
  { id: 2, question: 'Which Angular CLI command is used to create a new project?', options: ['ng new', 'ng create', 'ng init', 'ng start'], answer: 'ng new' },
  { id: 3, question: 'In Angular, what should you do before running tests for a new component?', options: ['Change the title in the component file', 'Initialize the component and its dependencies', 'Run `ng serve`', 'Update the `app.module.ts` file'], answer: 'Initialize the component and its dependencies' },
  { id: 4, question: 'True or False: Each test block in Angular should have its own fresh initialization of the component.', options: [], answer: 'True' },
  { id: 5, question: 'Which Angular CLI command is used to generate a new component?', options: ['ng generate component', 'ng create component', 'ng add component', 'ng new component'], answer: 'ng generate component' },
  { id: 6, question: 'What should be checked in a test to verify if a user’s name is correctly displayed when logged in?', options: ['The presence of a div with `*ngIf="isLoggedIn"`', 'The absence of a div with `*ngIf="!isLoggedIn"`', 'The content of a `<p>` tag', 'The value of the `isLoggedIn` variable'], answer: 'The content of a `<p>` tag' },
  { id: 7, question: 'How can you test asynchronous operations in Angular?', options: ['By using synchronous tests', 'By using promises and `async` utility', 'By mocking data services', 'By skipping the tests'], answer: 'By using promises and `async` utility' },
  { id: 8, question: 'What is the purpose of the `DataService` in the provided example?', options: ['To simulate asynchronous data retrieval', 'To handle user authentication', 'To manage component state', 'To format data'], answer: 'To simulate asynchronous data retrieval' },
  { id: 9, question: 'Which decorator is used to define a pipe in Angular?', options: ['@Component', '@Injectable', '@Pipe', '@Directive'], answer: '@Pipe' },
  { id: 10, question: 'True or False: Angular’s testing utilities can be used to test isolated pipes.', options: [], answer: 'True' },
  { id: 11, question: 'What is the correct method to create a promise that resolves after a delay in Angular?', options: ['Using `setTimeout` with `resolve`', 'Using `Observable` with `timer`', 'Using `Promise.resolve` directly', 'Using `async` function'], answer: 'Using `setTimeout` with `resolve`' },
  { id: 12, question: 'In the unit testing example, which file contains the tests for the `ReversePipe`?', options: ['reverse.pipe.spec.ts', 'reverse.pipe.ts', 'app.component.spec.ts', 'user.component.spec.ts'], answer: 'reverse.pipe.spec.ts' },
  { id: 13, question: 'What should you verify in a test for a service method that returns a resolved promise?', options: ['The method’s return value', 'The service’s instance', 'The component’s template', 'The HTML structure'], answer: 'The method’s return value' },
  { id: 14, question: 'What is the purpose of the `ngOnInit` lifecycle hook in the `UserComponent`?', options: ['To initialize component properties and fetch data', 'To handle component destruction', 'To update component templates', 'To manage routing'], answer: 'To initialize component properties and fetch data' },
  { id: 15, question: 'How do you test that a component’s variable correctly receives data from a service?', options: ['By comparing it with the service’s data', 'By checking the component’s HTML', 'By inspecting the service’s methods', 'By verifying the component’s CSS'], answer: 'By comparing it with the service’s data' },
  { id: 16, question: 'What should be tested to ensure that a component displays content correctly based on a boolean variable?', options: ['The visibility of specific HTML elements', 'The component’s style', 'The data binding in the template', 'The component’s input properties'], answer: 'The visibility of specific HTML elements' },
  { id: 17, question: 'True or False: You should use the `async` utility in Angular tests to handle asynchronous data.', options: [], answer: 'True' },
  { id: 18, question: 'What does the `fixture.whenStable()` method do in Angular testing?', options: ['It waits for asynchronous tasks to complete', 'It initializes the component fixture', 'It resets the testing environment', 'It compiles the component template'], answer: 'It waits for asynchronous tasks to complete' },
  { id: 19, question: 'In the `UserComponent`, how is the `UserService` injected?', options: ['Through the component’s constructor', 'Using Angular’s `@Inject` decorator', 'Via a service provider in `app.module.ts`', 'Directly in the template'], answer: 'Through the component’s constructor' },
  { id: 20, question: 'What is a common use case for testing pipes in Angular?', options: ['To ensure data transformation works as expected', 'To verify component interactions', 'To validate service methods', 'To check HTTP responses'], answer: 'To ensure data transformation works as expected' },
  { id: 21, question: 'Which lifecycle hook is used for actions after Angular initializes the component’s views?', options: ['ngAfterViewInit', 'ngOnInit', 'ngOnChanges', 'ngOnDestroy'], answer: 'ngAfterViewInit' },
  { id: 22, question: 'True or False: Each `it` block in Angular testing should operate independently from others.', options: [], answer: 'True' },
  { id: 23, question: 'What should be done if a test for a component fails after changing a file?', options: ['Re-run the tests and check error logs', 'Ignore the errors', 'Update the component’s CSS', 'Change the component’s template'], answer: 'Re-run the tests and check error logs' },
  { id: 24, question: 'Which method is used to set up a promise-based asynchronous test in Angular?', options: ['`async`', '`await`', '`done`', '`fakeAsync`'], answer: '`async`' },
  { id: 25, question: 'How is a pipe tested in isolation?', options: ['By sending a string to its transform function and verifying the result', 'By testing it within a component', 'By checking its integration with services', 'By examining its HTML output'], answer: 'By sending a string to its transform function and verifying the result' }
];

