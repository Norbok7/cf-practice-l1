export const ANGULAR_DIRECTIVES_QUESTIONS = [
  { id: 1, question: 'What is the purpose of `ngIf` in Angular?', options: ['To loop through a collection', 'To conditionally include or exclude elements in the DOM', 'To bind form inputs', 'To style components'], answer: 'To conditionally include or exclude elements in the DOM' },
  { id: 2, question: 'In Angular, which directive is used to iterate over a list?', options: ['ngFor', 'ngIf', 'ngSwitch', 'ngClass'], answer: 'ngFor' },
  { id: 3, question: 'True or False: The `ngSwitch` directive can be used to conditionally display multiple elements based on a given value.', options: [], answer: 'True' },
  { id: 4, question: 'What does the `ngClass` directive do in Angular?', options: ['Dynamically sets CSS classes on an element', 'Manages form controls', 'Toggles elements in the DOM', 'Handles routing'], answer: 'Dynamically sets CSS classes on an element' },
  { id: 5, question: 'Which Angular decorator is used to define a new directive?', options: ['@Injectable', '@Directive', '@Component', '@NgModule'], answer: '@Directive' },
  { id: 6, question: 'What is the function of `Renderer2` in Angular?', options: ['To provide a way to interact with the DOM in a platform-independent manner', 'To handle HTTP requests', 'To manage form validation', 'To configure routing'], answer: 'To provide a way to interact with the DOM in a platform-independent manner' },
  { id: 7, question: 'How do you apply a custom directive to an element in Angular?', options: ['Using the `@Directive` decorator', 'By including the directive in the component’s template', 'Using `ngModel` directive', 'With `[(ngModel)]` syntax'], answer: 'By including the directive in the component’s template' },
  { id: 8, question: 'True or False: The `ngOnInit` lifecycle hook is used to initialize a component after Angular first displays the data-bound properties.', options: [], answer: 'True' },
  { id: 9, question: 'In Angular, which service is used for handling HTTP operations?', options: ['HttpClient', 'DataService', 'ApiService', 'HttpService'], answer: 'HttpClient' },
  { id: 10, question: 'What does the `ngStyle` directive do?', options: ['Applies inline styles to an element', 'Binds data to the DOM', 'Manages form inputs', 'Handles event binding'], answer: 'Applies inline styles to an element' },
  { id: 11, question: 'Which of the following decorators is used to inject a service into a component?', options: ['@Injectable', '@Component', '@Directive', '@Pipe'], answer: '@Injectable' },
  { id: 12, question: 'What is the primary use of Angular’s `@NgModule` decorator?', options: ['To define a component', 'To create a directive', 'To configure a module that contains components, directives, and services', 'To manage routing'], answer: 'To configure a module that contains components, directives, and services' },
  { id: 13, question: 'Which lifecycle hook is called before Angular destroys the component?', options: ['ngOnDestroy', 'ngOnInit', 'ngAfterViewInit', 'ngOnChanges'], answer: 'ngOnDestroy' },
  { id: 14, question: 'True or False: You can use `@Input` to pass data from a parent component to a child component.', options: [], answer: 'True' },
  { id: 15, question: 'What is the role of `ngOnChanges` lifecycle hook?', options: ['Respond to changes in data-bound input properties', 'Initialize the component', 'Handle user input', 'Manage HTTP responses'], answer: 'Respond to changes in data-bound input properties' },
  { id: 16, question: 'Which of the following is an example of a structural directive in Angular?', options: ['ngIf', 'ngClass', 'ngStyle', 'ngModel'], answer: 'ngIf' },
  { id: 17, question: 'In Angular, how do you bind a form control to a property in a component?', options: ['Using `ngModel` directive', 'With `{{ }}` syntax', 'Using `@Input` decorator', 'By setting attributes directly'], answer: 'Using `ngModel` directive' },
  { id: 18, question: 'What does the `ngFor` directive accomplish in Angular?', options: ['Iterates over a list to create a template for each item', 'Conditionally displays elements', 'Binds form inputs', 'Styles elements dynamically'], answer: 'Iterates over a list to create a template for each item' },
  { id: 19, question: 'True or False: The `ngAfterViewInit` hook allows you to perform actions after Angular initializes the component’s view and child views.', options: [], answer: 'True' },
  { id: 20, question: 'Which directive is used to handle user events in Angular?', options: ['ngClick', 'ngChange', 'ngEvent', 'ngModel'], answer: 'ngModel' },
  { id: 21, question: 'How can you conditionally include or exclude an element from the DOM in Angular?', options: ['Using `ngIf` directive', 'By applying styles conditionally', 'Using `ngClass` directive', 'With `ngStyle`'], answer: 'Using `ngIf` directive' },
  { id: 22, question: 'What is the purpose of the `ngSwitch` directive?', options: ['To handle multiple conditions in templates', 'To iterate over items', 'To conditionally include elements', 'To style elements dynamically'], answer: 'To handle multiple conditions in templates' },
  { id: 23, question: 'In Angular, how do you define a new custom directive?', options: ['By using `@Directive` decorator', 'With `@Component` decorator', 'Using `@Pipe` decorator', 'By defining a class in a module'], answer: 'By using `@Directive` decorator' },
  { id: 24, question: 'Which decorator is used to define a new Angular component?', options: ['@Component', '@Directive', '@Pipe', '@Injectable'], answer: '@Component' },
  { id: 25, question: 'True or False: Angular’s dependency injection system can provide instances of services to components.', options: [], answer: 'True' }
];
